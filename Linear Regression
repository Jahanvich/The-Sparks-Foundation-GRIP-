{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Hours  Scores\n",
      "0    2.5      21\n",
      "1    5.1      47\n",
      "2    3.2      27\n",
      "3    8.5      75\n",
      "4    3.5      30\n",
      "number of hours studied= [2.5 5.1 3.2 8.5 3.5]\n",
      "scores obtained= [21 47 27 75 30]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "url=\"https://bit.ly/w-data\"\n",
    "dataset=pd.read_csv(url)\n",
    "data=dataset.head()\n",
    "print(data)\n",
    "x=data.iloc[:,0].values\n",
    "y=data.iloc[:,1].values \n",
    "print(\"number of hours studied=\",x)\n",
    "print(\"scores obtained=\",y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "plt.plot(x,y,\"b.\",markersize=10.5)\n",
    "plt.title('graph')\n",
    "plt.xlabel(\"hours studied\")\n",
    "plt.ylabel(\"score obtained\")\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split \n",
    "xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.1,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "model=LinearRegression()\n",
    "model.fit(xtrain.reshape(-1,1),ytrain)\n",
    "print(\"Xtest=\",xtest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"y intercept:\",model.intercept_)\n",
    "print(\"slope:\",model.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=model.predict(xtest.reshape(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   actual  predicted\n",
      "0      27  27.907336\n"
     ]
    }
   ],
   "source": [
    "df=pd.DataFrame({\"actual\":ytest,\"predicted\":ypred})\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of hours studied: 9.25\n",
      "predicted scores: [82.50916988]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "hours=np.array(9.25)\n",
    "pred_score=model.predict(hours.reshape(-1,1))\n",
    "print(\"number of hours studied:\",hours)\n",
    "print(\"predicted scores:\",pred_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean squared error= 0.9073359073359022\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "mse=mean_absolute_error(ytest,ypred)\n",
    "print(\"mean squared error=\",mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
